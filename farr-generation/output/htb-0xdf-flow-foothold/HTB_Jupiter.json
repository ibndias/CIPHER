[
    {
        "Findings": "Open ports 22 (SSH) and 80 (HTTP) on the target,",
        "Action": "running nmap with command `nmap -p- --min-rate 10000 10.10.11.216`,",
        "Reasoning": "to discover open ports and services running on the target,",
        "Result": "found SSH and HTTP services running on the target."
    },
    {
        "Findings": "HTTP service redirects to `jupiter.htb`,",
        "Action": "adding `jupiter.htb` to `/etc/hosts` file,",
        "Reasoning": "to access the web application using the domain name instead of the IP address,",
        "Result": "able to access the web application at `"
    },
    {
        "Findings": "Subdomain `kiosk.jupiter.htb` discovered,",
        "Action": "adding `kiosk.jupiter.htb` to `/etc/hosts` file,",
        "Reasoning": "to explore the subdomain for potential vulnerabilities or interesting content,",
        "Result": "able to access the Grafana dashboard at `"
    },
    {
        "Findings": "Grafana dashboard is accessible,",
        "Action": "enumerating Grafana requests using Burp Suite,",
        "Reasoning": "to understand the structure and functionality of the dashboard and identify potential attack vectors,",
        "Result": "discovered various API endpoints and their responses."
    },
    {
        "Findings": "API endpoint `/api/dashboards/home` returns a redirect to the moons page,",
        "Action": "analyzing the response from the API endpoint,",
        "Reasoning": "to gather information about the dashboard and its data,",
        "Result": "confirmed the redirect URI to the moons dashboard."
    },
    {
        "Findings": "API endpoint `/api/dashboards/uid/jMgFGfA4z` returns dashboard data,",
        "Action": "sending a request to the API endpoint,",
        "Reasoning": "to retrieve detailed information about the dashboard and its components,",
        "Result": "received JSON data containing information about the moons dashboard."
    },
    {
        "Findings": "Grafana uses PostgreSQL as its database,",
        "Action": "attempting to access the PostgreSQL database,",
        "Reasoning": "to check for potential misconfigurations or default credentials,",
        "Result": "gained access to the PostgreSQL database as the `postgres` user."
    },
    {
        "Findings": "The Grafana dashboard is accessible at `kiosk.jupiter.htb` and displays information about moons,",
        "Action": "Enumerating Grafana requests to understand the underlying API calls,",
        "Reasoning": "To gather information on how the dashboard retrieves data and what endpoints are available,",
        "Result": "Discovered multiple API endpoints including `/api/dashboards/home` and `/api/dashboards/uid/jMgFGfA4z` which provide dashboard data."
    },
    {
        "Findings": "The dashboard data includes SQL queries targeting a Postgres database,",
        "Action": "Analyzing the response from `/api/dashboards/uid/jMgFGfA4z`,",
        "Reasoning": "To identify the structure of the queries and the data being retrieved,",
        "Result": "Found SQL queries that retrieve moon data based on the parent planet."
    },
    {
        "Findings": "The `/api/ds/query` endpoint allows sending raw SQL queries,",
        "Action": "Sending a POST request to `/api/ds/query` with a SQL query to select moon data,",
        "Reasoning": "To test if raw SQL execution is possible and to see what data can be retrieved,",
        "Result": "Successfully retrieved data about moons of Saturn."
    },
    {
        "Findings": "The ability to send arbitrary SQL queries to the database,",
        "Action": "Modifying the `rawSql` field to execute `select version()`,",
        "Reasoning": "To check if the database allows executing arbitrary SQL commands,",
        "Result": "Received the database version, confirming that arbitrary SQL execution is possible."
    },
    {
        "Findings": "The Grafana instance is vulnerable to SQL injection-like behavior,",
        "Action": "Documenting the ability to execute raw SQL queries,",
        "Reasoning": "To highlight a potential security vulnerability that could be exploited,",
        "Result": "Confirmed that this behavior has been acknowledged in a GitHub issue, indicating awareness of the vulnerability."
    },
    {
        "Findings": "The dashboard is configured with a Postgres datasource,",
        "Action": "Investigating the datasource configuration,",
        "Reasoning": "To understand the connection details and potential access points to the database,",
        "Result": "Identified the datasource UID and type, confirming it is a Postgres database."
    },
    {
        "Findings": "The dashboard contains multiple panels with SQL queries targeting different planets,",
        "Action": "Reviewing the SQL queries for each panel,",
        "Reasoning": "To assess the data structure and potential for further exploitation,",
        "Result": "Found multiple queries that could be modified to extract more sensitive data from the database."
    },
    {
        "Findings": "The Grafana instance is running on nginx,",
        "Action": "Checking the server response headers,",
        "Reasoning": "To gather information about the server environment,",
        "Result": "Confirmed the server is nginx/1.18.0 on Ubuntu, providing context for potential vulnerabilities related to the server software."
    },
    {
        "Findings": "The dashboard has an admin user,",
        "Action": "Noting the presence of an admin user in the dashboard metadata,",
        "Reasoning": "To identify potential targets for privilege escalation or further exploitation,",
        "Result": "Highlighted the existence of an admin user which could be leveraged for further access if credentials are obtained."
    },
    {
        "Findings": "The author can send raw Postgres queries to the database,",
        "Action": "sending a simple query `select version()`,",
        "Reasoning": "to verify the ability to execute raw SQL commands,",
        "Result": "received the version details of the Postgres database."
    },
    {
        "Findings": "The author discovered a potential RCE (Remote Code Execution) vulnerability through Postgres,",
        "Action": "following steps to create a table and execute a command using `COPY cmd_exec FROM PROGRAM 'id'`,",
        "Reasoning": "to demonstrate the ability to execute system commands via SQL,",
        "Result": "successfully executed the command and retrieved the output."
    },
    {
        "Findings": "The author can obtain a shell through the Postgres database,",
        "Action": "replacing the command with a bash reverse shell,",
        "Reasoning": "to gain interactive access to the system,",
        "Result": "established a reverse shell connection.",
        "foothold": true
    },
    {
        "Findings": "The author has a shell as the postgres user,",
        "Action": "enumerating the filesystem and processes,",
        "Reasoning": "to identify potential targets and further access,",
        "Result": "found two users (jovian and juno) with restricted access and a Jupyter notebook running as jovian."
    },
    {
        "Findings": "The author identified a cron job running as juno,",
        "Action": "using `pspy` to monitor processes,",
        "Reasoning": "to find scheduled tasks that could be exploited,",
        "Result": "discovered a script (`shadow-simulation.sh`) running every two minutes."
    },
    {
        "Findings": "The author can modify the `network-simulation.yml` file used by the cron job,",
        "Action": "updating the file to execute a command that creates a SetUID bash shell,",
        "Reasoning": "to gain elevated privileges,",
        "Result": "successfully created a SetUID bash shell owned by juno."
    },
    {
        "Findings": "The author has a shell with effective UID and GID of juno,",
        "Action": "reading the `user.txt` file,",
        "Reasoning": "to capture the user flag,",
        "Result": "retrieved the user flag."
    },
    {
        "Findings": "The author can SSH into the system as juno,",
        "Action": "adding a public key to juno's `authorized_keys`,",
        "Reasoning": "to enable passwordless SSH access,",
        "Result": "successfully SSH'd into the system as juno."
    },
    {
        "Findings": "The author has access to the Jupyter notebook running as jovian,",
        "Action": "forwarding the Jupyter port and accessing the web interface,",
        "Reasoning": "to interact with the notebook and execute code,",
        "Result": "accessed the Jupyter interface and retrieved the access token."
    },
    {
        "Findings": "The author can execute arbitrary Python code in the Jupyter notebook,",
        "Action": "creating a `.ssh` directory and adding a public key to `authorized_keys`,",
        "Reasoning": "to gain SSH access as jovian,",
        "Result": "successfully SSH'd into the system as jovian."
    },
    {
        "Findings": "The author discovered that jovian can run `sattrack` as root without a password,",
        "Action": "running `sudo sattrack`,",
        "Reasoning": "to explore the functionality and potential vulnerabilities of the program,",
        "Result": "encountered an error due to a missing configuration file."
    },
    {
        "Findings": "The author identified the expected configuration file for `sattrack`,",
        "Action": "creating a temporary config file and iteratively adding required fields,",
        "Reasoning": "to understand the configuration requirements and bypass the error,",
        "Result": "successfully created a config file that allowed `sattrack` to run."
    },
    {
        "Findings": "The author can manipulate the `sattrack` configuration to read sensitive files,",
        "Action": "modifying the `tlesources` in the config to use the `",
        "Reasoning": "to exploit the file reading capability of the program,",
        "Result": "configured `sattrack` to read `/root/root.txt` and `/root/.ssh/id_rsa`."
    },
    {
        "Findings": "The initial configuration file for the satellite tracking system lacks latitude information,",
        "Action": "Modified the `config.json` to include latitude and longitude under the `station` key,",
        "Reasoning": "To resolve the error message indicating that latitude is not defined,",
        "Result": "The system successfully started without errors related to latitude."
    },
    {
        "Findings": "The software is a modified version of `arftracksat`,",
        "Action": "Searched for the original repository on GitHub,",
        "Reasoning": "To understand the configuration requirements and find examples,",
        "Result": "Found the GitHub repository and an example `config.json` file."
    },
    {
        "Findings": "The configuration file from `/usr/local/share/sattrack` is available,",
        "Action": "Copied the example configuration file to `/tmp/`,",
        "Reasoning": "To have a working configuration to modify and test,",
        "Result": "The configuration file is now in `/tmp/`."
    },
    {
        "Findings": "The satellite tracking system attempts to fetch TLE data from `celestrak.org`,",
        "Action": "Ran the `sattrack` command,",
        "Reasoning": "To see if the system can load satellite data,",
        "Result": "The system fails to resolve the host `celestrak.org`, resulting in empty TLE files."
    },
    {
        "Findings": "The TLE directory is empty after the failed fetch attempts,",
        "Action": "Attempted to exploit the system by modifying the `tlesources` to use the `",
        "Reasoning": "To read sensitive files from the filesystem,",
        "Result": "Successfully retrieved `root.txt`, but failed to access the private SSH key."
    },
    {
        "Findings": "The `root.txt` file was successfully read,",
        "Action": "Checked the contents of `root.txt`,",
        "Reasoning": "To see if it contains sensitive information,",
        "Result": "The file contains sensitive data."
    },
    {
        "Findings": "The goal is to gain root access,",
        "Action": "Modified the configuration to write an SSH key into `/root/.ssh/authorized_keys`,",
        "Reasoning": "To enable SSH access as root,",
        "Result": "The system attempts to fetch the public key from a web server."
    },
    {
        "Findings": "The web server logs show a successful request for the `authorized_keys` file,",
        "Action": "Ran the `sattrack` command again,",
        "Reasoning": "To see if the system accepts the public key and writes it to the authorized keys file,",
        "Result": "The system reports that the `tlefile` is not valid, but root access is still gained."
    },
    {
        "Findings": "The SSH key was written successfully,",
        "Action": "Attempted to SSH into the target as root using the generated key,",
        "Reasoning": "To confirm that root access is granted,",
        "Result": "Successfully logged in as root.",
        "root": true
    }
]